version: '2'

services:

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      DATABASE_URL: jdbc:postgresql://order-db:5432/order
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      KAFKA_SERVERS: kafka:9092
    ports:
      - 8080:8888
    depends_on:
      - order-db
      - kafka

  order-db:
    image: postgres:latest
    environment:
      POSTGRES_DB: order
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  prometheus:
    image: prom/prometheus
#    network_mode: host
#    container_name: prometheus
#    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
#      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - D:\aston\OrderService\data\prometheus\config\prometheus.yml:/etc/prometheus/prometheus.yml

#  node-exporter:
#    image: prom/node-exporter:latest
##    network_mode: host
##    container_name: monitoring_node_exporter
##    restart: unless-stopped
#    ports:
#      - 9100

  grafana:
    image: grafana/grafana-oss:8.5.2
#    network_mode: host
#    container_name: grafana
#    restart: unless-stopped
#    user: postgres
    ports:
      - 3000:3000
#    volumes:
#      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_LOG_MODE=console file
      - GF_LOG_FILTERS=alerting.notifier.slack:debug alertmanager:debug ngalert:debug

